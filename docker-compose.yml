#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

x-superset-image: &superset-image apache/superset:${TAG:-latest-dev}
x-superset-depends-on: &superset-depends-on
  - database
  - redis
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./config/superset:/app/docker
  - superset_data:/app/superset_home

version: "3.9"

volumes:
  database_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}
  kafka_data: {}
  zookeeper_data: {}
  redis_data : {}
  superset_data : {}


services:
  database:
    container_name: database
    restart: unless-stopped
    image: postgres:latest
    volumes:
      - database_data:/var/lib/postgresql/data
      - ${PWD}/config/postgres-docker-entrypoint:/docker-entrypoint-initdb.d
    env_file:
      - config/database.env

  # Need 3.5 or later for container nodes
  zookeeper:
    container_name: zookeeper
    restart: unless-stopped
    image: bitnami/zookeeper:latest
    volumes:
      - zookeeper_data:/bitnami
    ports:
      - "127.0.0.1:2181:2181"
    env_file:
      - config/zookeeper.env

  coordinator:
    image: apache/druid:24.0.0
    restart: unless-stopped
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - database
    ports:
      - "127.0.0.1:8081:8081"
    command:
      - coordinator
    env_file:
      - config/druid.env

  broker:
    image: apache/druid:24.0.0
    restart: unless-stopped
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - database
      - coordinator
    ports:
      - "127.0.0.1:8082:8082"
    command:
      - broker
    env_file:
      - config/druid.env

  historical:
    image: apache/druid:24.0.0
    restart: unless-stopped
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - database
      - coordinator
    ports:
      - "127.0.0.1:8083:8083"
    command:
      - historical
    env_file:
      - config/druid.env

  middlemanager:
    image: apache/druid:24.0.0
    restart: unless-stopped
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - database
      - coordinator
    ports:
      - "127.0.0.1:8091:8091"
      - "127.0.0.1:8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - config/druid.env

  router:
    image: apache/druid:24.0.0
    restart: unless-stopped
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - database
      - coordinator
    ports:
      - "127.0.0.1:9999:8888"
    command:
      - router
    env_file:
      - config/druid.env
  
  kafka:
    image: bitnami/kafka:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:9092:9092"
    volumes:
      - kafka_data:/bitnami
    depends_on:
      - zookeeper
    env_file:
      - config/kafka.env

  # superset:
  #   image: amancevice/superset:latest
  #   restart: unless-stopped
  #   ports:
  #     - "127.0.0.1:8088:8088"
  #   env_file:
  #     - config/superset.env

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data

  # superset:
  #   image: apache/superset:latest
  #   container_name: superset_app
  #   command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
  #   user: "root"
  #   restart: unless-stopped
  #   # init: true
  #   depends_on:
  #     - database
  #     - redis
  #   ports:
  #     - "127.0.0.1:8088:8088"
  #   volumes:
  #     # - ${PWD}/config/superset_config.py:/app/pythonpath/superset_config.py
  #     - ./config/superset:/app/docker
  #     - superset_data:/app/superset_home
  #   env_file:
  #     - config/superset.env

  superset:
    env_file:
      - config/superset.env
    image: *superset-image
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - "127.0.0.1:8088:8088"
    depends_on: *superset-depends-on
    volumes: *superset-volumes

  superset-init:
    image: *superset-image
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file:
      - config/superset.env
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true

  superset-worker:
    image: *superset-image
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file:
      - config/superset.env
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test: ["CMD-SHELL", "celery inspect ping -A superset.tasks.celery_app:app -d celery@$$HOSTNAME"]

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file:
      - config/superset.env
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true

  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    depends_on:
      - superset
    volumes:
      - ${PWD}/config/cert_unitrend.pem:/etc/ssl/certs/cert.pem
      - ${PWD}/config/key_unitrend.pem:/etc/ssl/private/key.pem
      - ${PWD}/config/nginx.conf:/etc/nginx/nginx.conf